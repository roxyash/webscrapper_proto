version: '3'
tasks:
  default:
    desc: "task - for check all tasks"
    cmds:
      - task --list-all
  generate-py:
    desc: "Command code from proto"
    cmds:
      - python3 -m grpc_tools.protoc -I proto --python_out=./gen/python/ --grpc_python_out=./gen/python/ proto/scrapper/*.proto
      - sed -i '' 's/from scrapper import scrapper_pb2 as scrapper_dot_scrapper__pb2/from gen.python.scrapper import scrapper_pb as scrapper_dot_scrapper__pb2/g' ./gen/python/scrapper/scrapper_pb2_grpc.py
      - mv ./gen/python/scrapper/scrapper_pb2.py ./gen/python/scrapper/scrapper_pb.py
      - mv ./gen/python/scrapper/scrapper_pb2_grpc.py ./gen/python/scrapper/scrapper_pb_grpc.py
  generate-go:
    desc: "Command code from proto"
    cmds:
      - protoc -I proto proto/auth/*.proto --go_out=./gen/go/ --go_opt=paths=source_relative --go-grpc_out=./gen/go/ --go-grpc_opt=paths=source_relative

  create-and-push-commit:
    desc: "Update repo"
    cmds:
      - git add .
      - git commit -m "feat:update"
      - git push origin master

  create-and-push-tag:
    desc: "Update repo with Tag"
    cmds:
      - |
        latestTag=$(git tag | sort -V | tail -n 1)
        latestTag=${latestTag#v}
        major=$(echo $latestTag | cut -d. -f1)
        minor=$(echo $latestTag | cut -d. -f2)
        patch=$(echo $latestTag | cut -d. -f3)
        patch=$((patch + 1))
        newTag="v$major.$minor.$patch"
        if [ "$newTag" != "v$latestTag" ]; then
          git tag -a $newTag -m "feat:tag"
          git push origin $newTag
        fi

  release:
    desc: "Update version"
    cmds:
      - task: generate-go
      - task: create-and-push-commit
      - task: create-and-push-tag